version: 2.1
orbs:
  go: circleci/go@0.2.0
  splunk-app-package:
    executors:
      python27:
        docker:
          - image: circleci/python
    commands:
      package:
        steps:
          - run:
              name: Install Slim
              command: |
                pip install virtualenv
                mkdir ~/.venv
                virtualenv ~/.venv
                source ~/.venv/bin/activate
                pip install semantic_version
                pip install https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.1.tar.gz
                pip install git+https://github.com/pixelb/crudini
          - run:
              name: version
              command: |
                source ~/.venv/bin/activate   
                mkdir -p build
                VERSION=$(./semtag getcurrent)
                VERSION_SPLUNK=$(python ./splver.py ${VERSION})
                VERSION_PACKAGE=$(echo $VERSION | sed 's/\-[^+]*+/-B/g' | sed 's/v//')
                VERSION_DOCKER_M=$(echo  $VERSION | sed -n 's/v\([0-9]\).*/\1/p')
                VERSION_DOCKER_MM=$(echo  $VERSION | sed -n 's/v\([0-9]*\.[0-9]*\).*/\1/p')
                VERSION_DOCKER_MMP=$(echo  $VERSION | sed -n 's/v\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p')
                [ "$(./semtag getfinal)" != "${CIRCLE_TAG}" ] && ISPRE="-prerelease" || ISPRE=""
                PACKAGE_ID=$(crudini --get package/default/app.conf id name)
                echo export VERSION=${VERSION} >build/VERSION
                echo export VERSION_SPLUNK=${VERSION_SPLUNK} >>build/VERSION
                echo export VERSION_PACKAGE=${VERSION_PACKAGE} >>build/VERSION
                echo export VERSION_DOCKER_M=${VERSION_DOCKER_M} >>build/VERSION
                echo export VERSION_DOCKER_MM=${VERSION_DOCKER_MM} >>build/VERSION
                echo export VERSION_DOCKER_MMP=${VERSION_DOCKER_MMP} >>build/VERSION
                echo export PACKAGE_ID=${PACKAGE_ID} >>build/VERSION
                echo export PACKAGE_BUILD=$(date +%s) >>build/VERSION
                echo export ISPRE=${ISPRE} >>build/VERSION
          - run:
              name: version and package
              command: |
                source build/VERSION
                source ~/.venv/bin/activate
                BUILD_DIR=build/source/$PACKAGE_ID
                mkdir -p $BUILD_DIR
                cp -r package/* $BUILD_DIR/
                crudini --set $BUILD_DIR/default/app.conf launcher version $VERSION_SPLUNK
                crudini --set $BUILD_DIR/default/app.conf id version $VERSION_SPLUNK
                crudini --set $BUILD_DIR/default/app.conf install build ${PACKAGE_BUILD}
                slim generate-manifest $BUILD_DIR --update >/tmp/app.manifest  || true
                cp  /tmp/app.manifest  $BUILD_DIR/app.manifest
                mkdir -p build/package/splunkbase
                mkdir -p build/package/deployment
                slim package -o build/package/splunkbase $BUILD_DIR 
                ls build/package/splunkbase
    jobs:
      package:
        executor: python27
        steps:
          - checkout
          - package
          - persist_to_workspace:
              root: /home/circleci/project
              paths:
                - build/package/splunkbase
                - build/VERSION
          - store_artifacts:
              path: build/package/splunkbase
              destination: build-package-splunkbase
          - store_artifacts:
              path: build/VERSION
              destination: build-version
  splunk-app-inspect:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      inspect:
        parameters:
          options:
            description: Inspect options
            type: string
            default: --mode test
          label:
            description: string to identify test options in file name of output
            type: string
            default: test
        steps:
          - run:
              name: Install
              command: |
                python -m venv ~/.venv
                source ~/.venv/bin/activate
                pip install https://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz
          - run:
              name: inspect
              command: |
                source ~/.venv/bin/activate
                mkdir test-results || true
                PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
                splunk-appinspect inspect <<parameters.options>> --data-format junitxml --output-file test-results/appinspect-mode-<<parameters.label>>.xml $PACKAGE
                if grep failures=\"[1-9] test-results/appinspect-mode-<<parameters.label>>.xml; then exit 1; else exit 0; fi
    jobs:
      inspect:
        parameters:
          options:
            description: Inspect options
            type: string
            default: --mode test
          label:
            description: string to identify test options in file name of output
            type: string
            default: test
        executor: python37
        steps:
          - checkout
          - attach_workspace:
              at: /tmp/workspace
          - inspect:
              options: <<parameters.options>>
              label: <<parameters.label>>
          - store_artifacts:
              path: test-results
              destination: test-results
          - store_test_results:
              path: test-results
  splunk-app-test:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      test_aio:
        parameters:
          splunk_version:
            description: Image version
            type: string
            default: latest
        steps:
          - run:
              name: Setup for testing
              command: |
                pip install -r tests/requirements.txt
                pip install git+https://github.com/pixelb/crudini
                mkdir test-results
          - run:
              name: Splunk up
              command: |
                ls -l deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf
                export SPLUNK_VERSION=$(crudini --get deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk_version>>" VERSION)
                docker-compose -f docker-compose-ci.yml build --build-arg SPLUNK_VERSION=${SPLUNK_VERSION}
                docker-compose -f docker-compose-ci.yml up -d splunk                
                while [ $? -ne 0 ]; do docker logs c14f4fadf39a | grep "Ansible playbook complete" ; done
                sleep 30
          - run:
              name: Run diag
              when: always
              command: |
                mkdir /tmp/diag
                diag=$(docker-compose -f docker-compose-ci.yml exec splunk sudo -u splunk /opt/splunk/bin/splunk diag | grep "Splunk diagnosis file created" | sed -n 's/.* \(\/.*\.gz\)/\1/p') 
                docker-compose -f docker-compose-ci.yml exec splunk sudo chmod +r ${diag//[$'\t\r\n']}
                docker cp project_splunk_1:${diag//[$'\t\r\n']} /tmp/diag
          - run:
              name: Check btool
              when: always
              command: |
                docker-compose -f docker-compose-ci.yml exec splunk sudo /opt/splunk/bin/splunk cmd btool check
                docker-compose -f docker-compose-ci.yml up -d splunk
                sleep 30
          - run:
              name: Test
              when: always
              command: |
                docker-compose -f docker-compose-ci.yml up  --abort-on-container-exit test
              no_output_timeout: 1h
          - run:
              name: collect results
              when: always
              command: |
                docker volume ls
                docker container create --name dummy \
                                    -v project_results:/work/test-results \
                                    registry.access.redhat.com/ubi7/ubi
                docker cp dummy:/work/test-results/test.xml test-results/
    jobs:
      test_aio:
        parameters:
          splunk_version:
            description: Image version
            type: string
            default: latest
        executor: python37
        steps:
          - checkout
          - run: git submodule sync
          - run: git submodule update --init
          # - setup_remote_docker:
          #     docker_layer_caching: true
          - test_aio:
              splunk_version: <<parameters.splunk_version>>
          - store_artifacts:
              path: /tmp/diag
              destination: test-diag
          - store_artifacts:
              path: test-results
              destination: test-results
          - store_test_results:
              path: test-results
  splunk-release:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      tag:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
          tag_level:
            description: Tag level
            type: string
        steps:
          - run:
              name: TAG
              command: |
                git remote set-url origin https://<<parameters.gh_user>>:<<parameters.gh_token>>@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                ./semtag <<parameters.tag_level>>
      merge-to-master:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
        steps:
          - run:
              name: Merge
              command: |
                git remote set-url origin https://<<parameters.gh_user>>:<<parameters.gh_token>>@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                git config --global user.email "diogo.silva@devbusters.com"
                git config --global user.name "diogofgm"
                git pull origin master
                git merge master -m "Merge from master"
                git checkout master
                git merge develop
                git push
    jobs:
      tag:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
          tag_level:
            description: Tag level
            type: string
        executor: python37
        steps:
          - checkout
          - tag:
              tag_level: <<parameters.tag_level>>
              gh_user: <<parameters.gh_user>>
              gh_token: <<parameters.gh_token>>
      merge-to-master:
        executor: python37
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
        steps:
          - checkout
          - merge-to-master:
              gh_user: <<parameters.gh_user>>
              gh_token: <<parameters.gh_token>>
jobs:
  publish-gh:
    docker:
      - image: circleci/python:3.7
    steps:
      # - setup_remote_docker:
      #     docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - go/install
      - run:
          name: "Publish on GitHub"
          command: |
            PATH=$PATH:/usr/local/go/bin
            PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
            source /tmp/workspace/build/VERSION
            go get -v -u github.com/tcnksm/ghr            
            $HOME/go/bin/ghr -t ${GH_PAT} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${ISPRE} -delete ${VERSION} $PACKAGE

  publish-sbase:
    docker:
      - image: circleci/python:3.7
    steps:
      # - setup_remote_docker:
      #     docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install utils
          command: |
            pip install git+https://github.com/pixelb/crudini
      - run:
          name: "Publish on Splunkbase"
          command: |
            source .splunkbase
            source /tmp/workspace/build/VERSION
            PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
            PACKAGE_ID=$(crudini --get package/default/app.conf id name)
            [ "${ISPRE}" == "-prerelease" ] && SPLUNKBASE_VIS="false" || SPLUNKBASE_VIS="true"                
            curl -u ${SPLUNKBASE_USERNAME}:${SPLUNKBASE_PASSWORD}  --request POST https://splunkbase.splunk.com/api/v1/app/${SPLUNKBASE_ID}/new_release/ -F "files[]=@${PACKAGE}" -F "filename=${PACKAGE_ID}.spl" -F "cim_versions=${SPLUNKBASE_SPLUNK_CIM_VERSION}" -F "splunk_versions=${SPLUNKBASE_SPLUNK_VERSION}" -F "visibility=${SPLUNKBASE_VIS}"
workflows:
  version: 2
  build:
    jobs:
      - splunk-app-package/package:
          name: package
          filters:
            branches:
              only: /.*/
      - splunk-app-inspect/inspect:
          name: splunk-app-inspect-badge
          options: "--mode test"
          label: "badge"
          filters:
            branches:
              only: /.*/
          requires:
            - package
      - splunk-app-inspect/inspect:
          name: splunk-app-inspect-cloud
          options: "--mode precert --included-tags cloud"
          label: "cloud"
          filters:
            branches:
              only: /.*/
          requires:
            - package
      # - splunk-app-test/test_aio:
      #     name: test-splunk-8-0
      #     splunk_version: "8.0"
      #     filters:
      #       branches:
      #         only: /.*/
      # - splunk-app-test/test_aio:
      #     name: test-splunk-7-3
      #     splunk_version: "7.3"
      #     filters:
      #       branches:
      #         only: /.*/
      # - splunk-app-test/test_aio:
      #     name: test-splunk-7-2
      #     splunk_version: "7.2"
      #     filters:
      #       branches:
      #         only: /.*/
      - splunk-release/tag:
          context: GitHub
          name: tag-alpha
          tag_level: alpha
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          filters:
            branches:
              only: develop
      - approval-tag-beta:
          requires:
            - tag-alpha
          type: approval
          filters:
            branches:
              only: develop
      - splunk-release/tag:
          context: GitHub
          name: tag-beta
          tag_level: beta
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-beta
      - approval-merge-beta-to-master:
          requires:
            - tag-beta
          type: approval
          filters:
            branches:
              only: develop
      - splunk-release/merge-to-master:
          context: GitHub
          name: merge-beta-to-master
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-merge-beta-to-master
          filters:
            branches:
              only: develop
      - splunk-release/tag:
          context: GitHub
          name: tag-candidate
          tag_level: candidate
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          filters:
            branches:
              only: master
      - approval-tag-final-major:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          context: GitHub
          name: tag-final-major
          tag_level: final -s major
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-final-major
      - approval-tag-final-minor:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          context: GitHub
          name: tag-final-minor
          tag_level: final -s minor
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-final-minor
      - approval-tag-final-patch:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          context: GitHub
          name: tag-final-patch
          tag_level: final -s patch
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-final-patch
  publish:
    jobs:
      - publish-approval:
          type: approval
          filters:
            branches:
              only:
                - master
      - splunk-app-package/package:
          name: package
          requires:
            - publish-approval
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v\d*\.\d*\.\d*$/
      - publish-gh:
          context: GitHub
          requires:
            - package
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v\d*\.\d*\.\d*$/
      - publish-sbase:
          context: GitHub
          requires:
            - package
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v\d*\.\d*\.\d*$/